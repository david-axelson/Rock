<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Panel title="Check-in Simulator"
           type="block"
           hasFullscreen>

        <ConfigurationPanel :blockConfig="config"
                            v-model:config="configuration" />

        <StepPanel title="Family Search"
                   :step="familySearchStep"
                   :isBenchmarkReady="isBenchmarkReady"
                   @executeAction="executeAction($event, familySearchStep)">
            <FamilySearchPanel v-model:searchTerm="familySearchTerm"
                               v-model:searchType="familySearchType"
                               :families="familySearchData" />
        </StepPanel>

        <StepPanel title="Select Family"
                   :step="selectFamilyStep"
                   :isBenchmarkReady="isBenchmarkReady"
                   @executeAction="executeAction($event, selectFamilyStep)">
            <SelectFamilyPanel v-model:familyNumber="selectFamilyNumber"
                               :family="selectFamilyData" />
        </StepPanel>

        <StepPanel title="Select Attendee"
                   :step="selectAttendeeStep"
                   :isBenchmarkReady="isBenchmarkReady"
                   @executeAction="executeAction($event, selectAttendeeStep)">
            <SelectAttendeePanel v-model:attendeeNumber="selectAttendeeNumber"
                                 :attendee="selectAttendeeData" />
        </StepPanel>
    </Panel>
</template>

<style scoped></style>

<script setup lang="ts">
    import Panel from "@Obsidian/Controls/panel.obs";
    import { useConfigurationValues } from "@Obsidian/Utility/block";
    import { FamilySearchMode } from "@Obsidian/Enums/CheckIn/familySearchMode";
    import { FamilyBag } from "@Obsidian/ViewModels/CheckIn/familyBag";
    import { SearchForFamiliesOptionsBag } from "@Obsidian/ViewModels/Rest/CheckIn/searchForFamiliesOptionsBag";
    import { SearchForFamiliesResponseBag } from "@Obsidian/ViewModels/Rest/CheckIn/searchForFamiliesResponseBag";
    import { FamilyMembersOptionsBag } from "@Obsidian/ViewModels/Rest/CheckIn/familyMembersOptionsBag";
    import { FamilyMembersResponseBag } from "@Obsidian/ViewModels/Rest/CheckIn/familyMembersResponseBag";
    import { AttendeeOpportunitiesOptionsBag } from "@Obsidian/ViewModels/Rest/CheckIn/attendeeOpportunitiesOptionsBag";
    import { AttendeeOpportunitiesResponseBag } from "@Obsidian/ViewModels/Rest/CheckIn/attendeeOpportunitiesResponseBag";
    import { computed, ref, watch } from "vue";
    import { toNumber, toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { CheckInSimulatorOptionsBag, CheckInStep, Configuration, executeStepAction } from "./CheckInSimulator/utils.partial";
    import { useHttp } from "@Obsidian/Utility/http";
    import { Guid } from "@Obsidian/Types";
    import ConfigurationPanel from "./CheckInSimulator/configurationPanel.partial.obs";
    import StepPanel from "./CheckInSimulator/stepPanel.partial.obs";
    import SelectAttendeePanel from "./CheckInSimulator/selectAttendeePanel.partial.obs";
    import FamilySearchPanel from "./CheckInSimulator/familySearchPanel.partial.obs";
    import SelectFamilyPanel from "./CheckInSimulator/selectFamilyPanel.partial.obs";

    const config = useConfigurationValues<CheckInSimulatorOptionsBag>();
    const http = useHttp();

    // #region Values

    const configuration = ref<Configuration>({});

    // #endregion

    // #region Computed Values

    /**
     * All selected area unique identifiers.
     */
    const areaGuids = computed((): Guid[] => {
        return [
            ...configuration.value.primaryAreaGuids ?? [],
            ...configuration.value.secondaryAreaGuids ?? []
        ];
    });

    /**
     * Determines if we have all the basic configuration data required for
     * any step to function.
     */
    const isConfigurationReady = computed((): boolean => {
        return !!configuration.value.templateGuid && !!configuration.value.kioskGuid;
    });

    /**
     * Determines if we have enough information in the configuration to
     * run benchmark tests.
     */
    const isBenchmarkReady = computed((): boolean => {
        return (configuration.value.benchmarkIterations ?? 0) > 0
            || (configuration.value.benchmarkDuration ?? 0) > 0;
    });

    // #endregion

    // #region Functions

    /**
     * Saves the state of the UI to the URL.
     */
    function saveState(): void {
        const url = new URL(location.href);

        if (familySearchTerm.value) {
            url.searchParams.set("familySearchTerm", familySearchTerm.value);
        }
        else {
            url.searchParams.delete("familySearchTerm");
        }

        if (familySearchType.value && familySearchType.value !== FamilySearchMode.PhoneNumber.toString()) {
            url.searchParams.set("familySearchType", familySearchType.value);
        }
        else {
            url.searchParams.delete("familySearchType");
        }

        if (selectFamilyNumber.value !== 1) {
            url.searchParams.set("familyNumber", selectFamilyNumber.value.toString());
        }
        else {
            url.searchParams.delete("familyNumber");
        }

        if (selectFamilyNumber.value !== 1) {
            url.searchParams.set("attendeeNumber", selectAttendeeNumber.value.toString());
        }
        else {
            url.searchParams.delete("attendeeNumber");
        }

        if (window.location.href != url.href) {
            history.replaceState(undefined, "", url);
        }
    }

    /**
     * Restores the UI state from the URL.
     */
    function restoreState(): void {
        const originalUrl = new URL(location.href);

        familySearchTerm.value = originalUrl.searchParams.get("familySearchTerm") ?? "";
        familySearchType.value = originalUrl.searchParams.get("familySearchType") ?? "";
        selectFamilyNumber.value = toNumberOrNull(originalUrl.searchParams.get("familyNumber")) ?? 1;
        selectAttendeeNumber.value = toNumberOrNull(originalUrl.searchParams.get("attendeeNumber")) ?? 1;
    }

    /**
     * Executes the specified action on the step.
     *
     * @param action The name of the action from the split button.
     * @param step The step to execute the action on.
     */
    async function executeAction(action: string, step: CheckInStep): Promise<void> {
        return executeStepAction(action,
            step,
            configuration.value.benchmarkIterations,
            configuration.value.benchmarkDuration);
    }

    // #endregion

    // #region Family Search

    const familySearchTerm = ref("");
    const familySearchType = ref("");
    const familySearchStep = new CheckInStep(executeFamilySearchStep, undefined,
        () => isConfigurationReady.value && !!familySearchTerm.value);
    const familySearchData = ref<FamilyBag[]>();

    /**
     * Executes the family search process.
     */
    async function executeFamilySearchStep(): Promise<void> {
        const request: SearchForFamiliesOptionsBag = {
            configurationTemplateGuid: configuration.value.templateGuid,
            kioskGuid: configuration.value.kioskGuid,
            prioritizeKioskCampus: false,
            searchTerm: familySearchTerm.value,
            searchType: <FamilySearchMode>toNumber(familySearchType.value)
        };

        const response = await http.post<SearchForFamiliesResponseBag>("/api/v2/checkin/SearchForFamilies", undefined, request);

        if (response.isSuccess && response.data?.families) {
            familySearchData.value = response.data.families;
        }
        else {
            familySearchData.value = undefined;
            throw new Error(response.errorMessage ?? undefined);
        }
    }

    // #endregion

    // #region Select Family

    const selectFamilyStep = new CheckInStep(executeSelectFamilyStep, familySearchStep,
        () => !!familySearchData.value);
    const selectFamilyNumber = ref(1);
    const selectFamilyData = ref<FamilyMembersResponseBag>();

    /**
     * Executes the select family process.
     */
    async function executeSelectFamilyStep(): Promise<void> {
        if (!familySearchData.value || selectFamilyNumber.value > familySearchData.value.length) {
            throw new Error("Invalid family selected.");
        }

        const request: FamilyMembersOptionsBag = {
            configurationTemplateGuid: configuration.value.templateGuid,
            kioskGuid: configuration.value.kioskGuid,
            areaGuids: areaGuids.value,
            familyGuid: familySearchData.value[selectFamilyNumber.value - 1].guid
        };

        const response = await http.post<FamilyMembersResponseBag>("/api/v2/checkin/FamilyMembers", undefined, request);

        if (response.isSuccess && response.data) {
            selectFamilyData.value = response.data;
        }
        else {
            selectFamilyData.value = undefined;
            throw new Error(response.errorMessage ?? undefined);
        }
    }

    // #endregion

    // #region Select Attendee

    const selectAttendeeStep = new CheckInStep(executeSelectAttendeeStep, selectFamilyStep,
        () => !!selectFamilyData.value);
    const selectAttendeeNumber = ref(1);
    const selectAttendeeData = ref<AttendeeOpportunitiesResponseBag>();

    /**
     * Executes the select attendee process.
     */
    async function executeSelectAttendeeStep(): Promise<void> {
        if (!selectFamilyData.value?.people || selectAttendeeNumber.value > selectFamilyData.value.people.length) {
            throw new Error("Invalid attendee selected.");
        }

        const request: AttendeeOpportunitiesOptionsBag = {
            configurationTemplateGuid: configuration.value.templateGuid,
            kioskGuid: configuration.value.kioskGuid,
            areaGuids: areaGuids.value,
            familyGuid: selectFamilyData.value.familyGuid,
            personGuid: selectFamilyData.value.people[selectAttendeeNumber.value - 1].person?.guid ?? ""
        };

        const response = await http.post<AttendeeOpportunitiesResponseBag>("/api/v2/checkin/AttendeeOpportunities", undefined, request);

        if (response.isSuccess && response.data) {
            selectAttendeeData.value = response.data;
        }
        else {
            selectFamilyData.value = undefined;
            throw new Error(response.errorMessage ?? undefined);
        }
    }

    // #endregion

    // Watch for changes to values that require a URL update.
    const urlUpdateWatchees = [
        familySearchTerm,
        familySearchType,
        selectFamilyNumber,
        selectAttendeeNumber
    ];

    watch(urlUpdateWatchees, () => {
        saveState();
    });

    restoreState();
</script>
