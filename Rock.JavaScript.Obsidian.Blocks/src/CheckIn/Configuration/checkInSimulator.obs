<template>
    <Panel title="Check-in Simulator"
           type="block"
           hasFullscreen>
        <Panel title="Configuration"
               :modelValue="true"
               hasCollapse>
            <div class="row">
                <div class="col-md-6">
                    <DropDownList label="Configuration"
                                  v-model="configurationGuid"
                                  :items="configurationItems"
                                  rules="required" />
                </div>

                <div class="col-md-6">
                    <DropDownList label="Kiosk"
                                  v-model="kioskGuid"
                                  :items="config.kiosks ?? []"
                                  rules="required" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <CheckBoxList label="Primary Areas"
                                  v-model="primaryAreaGuids"
                                  :items="primaryAreas"
                                  horizontal
                                  :repeatColumns="4" />
                </div>

                <div class="col-md-6">
                    <CheckBoxList label="Secondary Areas"
                                  v-model="secondaryAreaGuids"
                                  :items="secondaryAreas"
                                  horizontal
                                  :repeatColumns="4" />
                </div>
            </div>

            <hr style="margin-left: calc(var(--panel-body-padding, 0px) * -1); margin-right: calc(var(--panel-body-padding, 0px) * -1);" />

            <div>
                <div class="col-md-6">
                    <NumberBox label="Benchmark Iterations"
                               v-model="benchmarkIterations"
                               :minimumValue="0"
                               help="The maximum number of iterations to run during a benchmark." />
                </div>

                <div class="col-md-6">
                    <NumberBox label="Benchmark Duration"
                               v-model="benchmarkDuration"
                               :minimumValue="0"
                               help="The maximum number of seconds to run during a benchmark." />
                </div>
            </div>
        </Panel>

        <Panel title="Family Search">
            <template #headerActions>
                <div class="d-flex gap action">
                    <StepStatus :step="familySearchStep" />
                </div>
            </template>

            <div class="row">
                <div class="col-md-4">
                    <TextBox label="Search Term"
                             v-model="familySearchTerm"
                             rules="required">
                        <template #inputGroupPrepend>
                            <div class="input-group-btn">
                                <button type="button"
                                        class="btn btn-default dropdown-toggle"
                                        data-toggle="dropdown">
                                    {{ familySearchType.text }} <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-right">
                                    <li v-for="item in familySearchTypeItems">
                                        <a href="#" title="test"
                                           @click.prevent="familySearchType = item">{{ item.text }}</a>
                                    </li>
                                </ul>
                            </div>
                        </template>
                    </TextBox>
                </div>

                <div class="col-md-8">
                    <ol v-if="familySearchData">
                        <li v-for="item in familySearchData" :key="item.guid ?? undefined">
                            {{ item.name }} ({{ item.members?.map(m => m.nickName).join(", ") }})
                        </li>
                    </ol>
                </div>
            </div>

            <div class="actions">
                <SplitButton btnType="primary"
                             :items="familySearchActions"
                             :disabled="!isFamilySearchReady"
                             autoDisable
                             @click="executeAction($event, familySearchStep)" />
            </div>
        </Panel>

        <Panel title="Select Family">
            <template #headerActions>
                <div class="d-flex gap action">
                    <StepStatus :step="selectFamilyStep" />
                </div>
            </template>

            <div class="row">
                <div class="col-md-4">
                    <NumberUpDown label="Family Number"
                                  v-model="selectFamilyNumber"
                                  :min="1" />
                </div>

                <div v-if="selectFamilyData" class="col-md-8">
                    <div v-if="selectFamilyData.people">
                        <div>People:</div>

                        <ol>
                            <li v-for="item in selectFamilyData.people" :key="item.person!.guid!">
                                {{ item.person?.fullName }}
                                <ul v-if="item.selectedOptions && item.selectedOptions.length > 0">
                                    <li v-for="option in item.selectedOptions">
                                        {{ getSelectedOptions(option) }}
                                    </li>
                                </ul>
                            </li>
                        </ol>
                    </div>

                    <div v-if="selectFamilyData.existingAttendance">
                        <div>Already checked in:</div>

                        <ol>
                            <li v-for="item in selectFamilyData.existingAttendance" :key="item.guid!">
                                {{ item.fullName }} (Group="{{ item.group!.name }}"; Location="{{ item.location!.name }}"; Schedule="{{ item.schedule!.name }}")
                            </li>
                        </ol>
                    </div>
                </div>
            </div>

            <div class="actions">
                <SplitButton btnType="primary"
                             :items="selectFamilyActions"
                             autoDisable
                             @click="executeAction($event, selectFamilyStep)" />
            </div>
        </Panel>
    </Panel>
</template>

<style scoped></style>

<script setup lang="ts">
    import SplitButton from "./CheckInSimulator/splitButton.partial.obs";
    import StepStatus from "./CheckInSimulator/stepStatus.partial.obs";
    import CheckBoxList from "@Obsidian/Controls/checkBoxList.obs";
    import DropDownList from "@Obsidian/Controls/dropDownList.obs";
    import Panel from "@Obsidian/Controls/panel.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { ConfigurationItemSummaryBag } from "@Obsidian/ViewModels/CheckIn/configurationItemSummaryBag";
    import { FamilySearchMode, FamilySearchModeDescription } from "@Obsidian/Enums/CheckIn/familySearchMode";
    import { FamilySearchItemBag } from "@Obsidian/ViewModels/CheckIn/familySearchItemBag";
    import { PotentialAttendeeBag } from "@Obsidian/ViewModels/CheckIn/potentialAttendeeBag";
    import { ListConfigurationsOptionsBag } from "@Obsidian/ViewModels/Rest/CheckIn/listConfigurationsOptionsBag";
    import { ListConfigurationsResponseBag } from "@Obsidian/ViewModels/Rest/CheckIn/listConfigurationsResponseBag";
    import { SearchForFamiliesOptionsBag } from "@Obsidian/ViewModels/Rest/CheckIn/searchForFamiliesOptionsBag";
    import { SearchForFamiliesResponseBag } from "@Obsidian/ViewModels/Rest/CheckIn/searchForFamiliesResponseBag";
    import { ListFamilyMembersOptionsBag } from "@Obsidian/ViewModels/Rest/CheckIn/listFamilyMembersOptionsBag";
    import { ListFamilyMembersResponseBag } from "@Obsidian/ViewModels/Rest/CheckIn/listFamilyMembersResponseBag";
    import { computed, ref, watch } from "vue";
    import { enumToListItemBag } from "@Obsidian/Utility/enumUtils";
    import { toNumber, toNumberOrNull } from "@Obsidian/Utility/numberUtils";
    import { CheckInStep } from "./CheckInSimulator/utils.partial";
    import NumberBox from "@Obsidian/Controls/numberBox.obs";
    import { useHttp } from "@Obsidian/Utility/http";
    import { Guid } from "@Obsidian/Types";
    import NumberUpDown from "@Obsidian/Controls/numberUpDown.obs";
    import { SelectedOptionsBag } from "@Obsidian/ViewModels/CheckIn/selectedOptionsBag";

    // #region Types

    type CheckInSimulatorOptionsBag = {
        configurations: ConfigurationItemSummaryBag[] | null;

        kiosks: ListItemBag[] | null;
    };

    // #endregion

    const config = useConfigurationValues<CheckInSimulatorOptionsBag>();
    const invokeBlockAction = useInvokeBlockAction();
    const http = useHttp();

    // #region Values

    let disableUrlUpdate = false;

    const configurationGuid = ref("");
    const configurationItems: ListItemBag[] = config.configurations?.map(c => ({
        value: c.guid,
        text: c.name
    })) ?? [];

    const benchmarkIterations = ref<number>();
    const benchmarkDuration = ref<number>();

    const executeToHereAction: ListItemBag = { value: "executeToHere", text: "Execute" };
    const executeThisStepAction: ListItemBag = { value: "executeThisStep", text: "Execute This Step" };
    const benchmarkToHereAction: ListItemBag = { value: "benchmarkToHere", text: "Benchmark" };
    const bencharkThisStepAction: ListItemBag = { value: "benchmarkThisStep", text: "Benchmark This Step" };

    const kioskGuid = ref("");

    const primaryAreaGuids = ref<string[]>([]);
    const secondaryAreaGuids = ref<string[]>([]);
    const primaryAreas = ref<ListItemBag[]>([]);
    const secondaryAreas = ref<ListItemBag[]>([]);

    const familySearchTerm = ref("");
    const familySearchTypeItems = enumToListItemBag(FamilySearchModeDescription);
    const familySearchType = ref(familySearchTypeItems[0]);
    const familySearchStep = new CheckInStep(executeFamilySearchStep);
    const familySearchData = ref<FamilySearchItemBag[]>();

    const selectFamilyStep = new CheckInStep(executeSelectFamilyStep, familySearchStep);
    const selectFamilyNumber = ref(1);
    const selectFamilyData = ref<ListFamilyMembersResponseBag>();

    // #endregion

    // #region Computed Values

    /**
     * All selected area unique identifiers.
     */
    const areaGuids = computed((): Guid[] => {
        return [
            ...primaryAreaGuids.value,
            ...secondaryAreaGuids.value
        ];
    });

    /**
     * Determines if we have all the basic configuration data required for
     * any step to function.
     */
    const isConfigurationReady = computed((): boolean => {
        return !!configurationGuid.value && !!kioskGuid.value;
    });

    /**
     * Determines if we have enough information in the configuration to
     * run benchmark tests.
     */
    const isBenchmarkReady = computed((): boolean => {
        return (benchmarkIterations.value ?? 0) > 0
            || (benchmarkDuration.value ?? 0) > 0;
    });

    /**
     * Determines if we are ready to run any of the family search actions.
     */
    const isFamilySearchReady = computed((): boolean => {
        return isConfigurationReady.value && !!familySearchTerm.value;
    });

    /**
     * Determines if we have all the data required to run a family search
     * without running any previous steps.
     */
    const isFamilySearchDataReady = computed((): boolean => {
        return isConfigurationReady.value;
    });

    /**
     * Gets the button actions available to family search.
     */
    const familySearchActions = computed((): ListItemBag[] => {
        return getStepActions(isFamilySearchDataReady.value);
    });

    /**
     * Determines if we have all the data required for the second step.
     */
    const isSecondStepDataReady = computed((): boolean => {
        return isFamilySearchDataReady.value && !!familySearchData.value;
    });

    /**
     * Gets the button actions available to family search.
     */
    const selectFamilyActions = computed((): ListItemBag[] => {
        return getStepActions(isSecondStepDataReady.value);
    });

    // #endregion

    // #region Functions

    /**
     * Restores the state of the UI from the URL.
     */
    async function restoreState(): Promise<void> {
        const originalUrl = new URL(location.href);

        disableUrlUpdate = true;

        try {
            configurationGuid.value = originalUrl.searchParams.get("configuration") ?? "";
            kioskGuid.value = originalUrl.searchParams.get("kiosk") ?? "";

            benchmarkIterations.value = toNumberOrNull(originalUrl.searchParams.get("benchmarkIterations")) ?? undefined;
            benchmarkDuration.value = toNumberOrNull(originalUrl.searchParams.get("benchmarkDuration")) ?? undefined;

            familySearchTerm.value = originalUrl.searchParams.get("familySearchTerm") ?? "";
            familySearchType.value = familySearchTypeItems.find(item => item.value === originalUrl.searchParams.get("familySearchType")) ?? familySearchTypeItems[0];

            selectFamilyNumber.value = toNumberOrNull(originalUrl.searchParams.get("selectFamilyNumber")) ?? 1;

            if (!configurationGuid.value || !kioskGuid.value) {
                return;
            }

            await updateAreaItems();

            primaryAreaGuids.value = originalUrl.searchParams.get("primaryAreas")?.split(",") ?? [];
            secondaryAreaGuids.value = originalUrl.searchParams.get("secondaryAreas")?.split(",") ?? [];
        }
        finally {
            disableUrlUpdate = false;
        }
    }

    /**
     * Gets the actions available to a step. This uses the parameters and other
     * data to determine which actions can be used.
     *
     * @param isDataReady True if enough data is ready to execute just this step.
     */
    function getStepActions(isDataReady: boolean): ListItemBag[] {
        const actions: ListItemBag[] = [executeToHereAction];

        if (isBenchmarkReady.value) {
            actions.push(benchmarkToHereAction);
        }

        if (isDataReady) {
            actions.push(executeThisStepAction);

            if (isBenchmarkReady.value) {
                actions.push(bencharkThisStepAction);
            }
        }

        return actions;
    }

    /**
     * Gets the area items from the server and updates the selected values
     * to only those which are still valid.
     */
    async function updateAreaItems(): Promise<void> {
        if (!kioskGuid.value) {
            primaryAreaGuids.value = [];
            primaryAreas.value = [];
            secondaryAreaGuids.value = [];
            secondaryAreas.value = [];

            return;
        }

        const request: ListConfigurationsOptionsBag = {
            kioskGuid: kioskGuid.value
        };

        const response = await http.post<ListConfigurationsResponseBag>("/api/v2/checkin/ListConfigurations", undefined, request);

        if (response.isSuccess && response.data?.areas) {
            primaryAreas.value = response.data.areas
                .filter(a => (a.primaryConfigurationGuids ?? []).includes(configurationGuid.value))
                .map(a => ({ value: a.guid, text: a.name }));

            secondaryAreas.value = response.data.areas
                .filter(a => !(a.primaryConfigurationGuids ?? []).includes(configurationGuid.value))
                .map(a => ({ value: a.guid, text: a.name }));
        }
    }

    /**
     * Executes the specified action on the step.
     *
     * @param action The name of the action from the split button.
     * @param step The step to execute the action on.
     */
    async function executeAction(action: string, step: CheckInStep): Promise<void> {
        try {
            if (action === executeToHereAction.value) {
                await step.execute(true);
            }
            else if (action === executeThisStepAction.value) {
                await step.execute(false);
            }
            else if (action === benchmarkToHereAction.value) {
                await step.executeBatch(benchmarkIterations.value, benchmarkDuration.value, true);
            }
            else if (action === bencharkThisStepAction.value) {
                await step.executeBatch(benchmarkIterations.value, benchmarkDuration.value, false);
            }
        }
        catch (error) {
            console.error(error);
        }
    }

    function getSelectedOptions(item: SelectedOptionsBag): string {
        const options: string[] = [];

        if (item.area) {
            options.push(`Area="${item.area.name}"`);
        }

        if (item.group) {
            options.push(`Group="${item.group.name}"`);
        }

        if (item.location) {
            options.push(`Location="${item.location.name}"`);
        }

        if (item.schedule) {
            options.push(`Schedule="${item.schedule.name}"`);
        }

        if (options.length === 0) {
            return "";
        }

        return `Default: ${options.join("; ")}`;
    }

    async function executeFamilySearchStep(): Promise<void> {
        const request: SearchForFamiliesOptionsBag = {
            configurationGuid: configurationGuid.value,
            kioskGuid: kioskGuid.value,
            prioritizeKioskCampus: false,
            searchTerm: familySearchTerm.value,
            searchType: <FamilySearchMode>toNumber(familySearchType.value.value)
        };

        const response = await http.post<SearchForFamiliesResponseBag>("/api/v2/checkin/SearchForFamilies", undefined, request);

        if (response.isSuccess && response.data?.families) {
            familySearchData.value = response.data.families;
        }
        else {
            familySearchData.value = undefined;
            throw new Error(response.errorMessage ?? undefined);
        }
    }

    async function executeSelectFamilyStep(): Promise<void> {
        if (!familySearchData.value || selectFamilyNumber.value > familySearchData.value.length) {
            throw new Error("Invalid family selected.");
        }

        const request: ListFamilyMembersOptionsBag = {
            configurationGuid: configurationGuid.value,
            kioskGuid: kioskGuid.value,
            areaGuids: areaGuids.value,
            familyGuid: familySearchData.value[selectFamilyNumber.value - 1].guid
        };

        const response = await http.post<ListFamilyMembersResponseBag>("/api/v2/checkin/ListFamilyMembers", undefined, request);

        if (response.isSuccess && response.data) {
            selectFamilyData.value = response.data;
        }
        else {
            selectFamilyData.value = undefined;
            throw new Error(response.errorMessage ?? undefined);
        }
    }

    // #endregion

    watch(kioskGuid, () => updateAreaItems());

    const urlUpdateWatchees = [
        configurationGuid,
        kioskGuid,
        benchmarkIterations,
        benchmarkDuration,
        primaryAreaGuids,
        secondaryAreaGuids,
        familySearchTerm,
        familySearchType,
        selectFamilyNumber
    ];

    // Watch for changes to values that require a URL update.
    watch(urlUpdateWatchees, () => {
        if (disableUrlUpdate) {
            return;
        }

        const url = new URL(location.href);

        url.search = "";

        if (configurationGuid.value) {
            url.searchParams.append("configuration", configurationGuid.value);
        }

        if (kioskGuid.value) {
            url.searchParams.append("kiosk", kioskGuid.value);
        }

        if (primaryAreaGuids.value.length > 0) {
            url.searchParams.append("primaryAreas", primaryAreaGuids.value.join(","));
        }

        if (secondaryAreaGuids.value.length > 0) {
            url.searchParams.append("secondaryAreas", secondaryAreaGuids.value.join(","));
        }

        if (benchmarkIterations.value) {
            url.searchParams.append("benchmarkIterations", benchmarkIterations.value.toString());
        }

        if (benchmarkDuration.value) {
            url.searchParams.append("benchmarkDuration", benchmarkDuration.value.toString());
        }

        if (familySearchTerm.value) {
            url.searchParams.append("familySearchTerm", familySearchTerm.value);
        }

        if (familySearchType.value.value && familySearchType.value.value !== FamilySearchMode.PhoneNumber.toString()) {
            url.searchParams.append("familySearchType", familySearchType.value.value);
        }

        if (selectFamilyNumber.value !== 1) {
            url.searchParams.append("selectFamilyNumber", selectFamilyNumber.value.toString());
        }

        history.replaceState(undefined, "", url);
    });

    restoreState();
</script>
