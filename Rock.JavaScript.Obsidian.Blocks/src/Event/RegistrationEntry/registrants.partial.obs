<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="registrationentry-registrant">
        <NotificationBox v-if="hasWaitlist && !isOnWaitlist" alertType="success">
            This {{ registrantTerm }} will be fully registered.
        </NotificationBox>
        <NotificationBox v-else-if="isOnWaitlist" alertType="warning">
            This {{ registrantTerm }} will be on the waiting list.
        </NotificationBox>
        <template v-for="(r, i) in registrants" :key="r.guid">
            <Registrant v-show="currentRegistrantIndex === i" :currentRegistrant="r" :isWaitList="isOnWaitlist" @next="onNext" @previous="onPrevious" />
        </template>
    </div>
</template>
<script setup lang="ts">
    import { computed, ref } from "vue";
    import Registrant from "./registrant.partial.obs";
    import { RegistrantInfo } from "./types.partial";
    import { CurrentRegistrationEntryState, PersistSession, use } from "./utils.partial";
    import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
    import { smoothScrollToTop } from "@Obsidian/Utility/page";

    const registrationEntryState = use(CurrentRegistrationEntryState);
    const persistSession = use(PersistSession);

    const emit = defineEmits<{
        (e: "next"): void,
        (e: "previous"): void
    }>();

    // #region Values

    const hasCopiedCommonValues = ref<boolean>(false);

    // #endregion

    // #region Functions

    /** The event handler when the user clicks to move to the previous registrant */
    async function onPrevious(): Promise<void> {
        if (registrationEntryState.currentRegistrantIndex <= 0) {
            emit("previous");
            return;
        }

        const lastFormIndex = registrationEntryState.viewModel.registrantForms.length - 1;
        registrationEntryState.currentRegistrantIndex--;
        registrationEntryState.currentRegistrantFormIndex = lastFormIndex;
        await persistSession();

        // Wait for the form to be rendered and then scroll to the top.
        // TODO JMH Should this be `nextTick`?
        setTimeout(() => smoothScrollToTop(), 10);
    }

    /** The event handler when the user clicks to move to the next registrant */
    async function onNext(): Promise<void> {
        const lastIndex = registrationEntryState.registrants.length - 1;

        if (registrationEntryState.currentRegistrantIndex >= lastIndex) {
            emit("next");
            return;
        }

        // If the first registrant was just completed, then copy the common/shared values to other registrants
        if (registrationEntryState.currentRegistrantIndex === 0) {
            copyCommonValuesFromFirstRegistrant();
        }

        registrationEntryState.currentRegistrantIndex++;
        registrationEntryState.currentRegistrantFormIndex = 0;
        await persistSession();

        // Wait for the form to be rendered and then scroll to the top.
        // TODO JMH Should this be `nextTick`?
        setTimeout(() => smoothScrollToTop(), 10);
    }

    /** Copy the common values from the first registrant to the others */
    function copyCommonValuesFromFirstRegistrant(): void {
        // Only copy one time
        if (hasCopiedCommonValues.value) {
            return;
        }

        hasCopiedCommonValues.value = true;
        const firstRegistrant = registrants.value[0];

        for (let i = 1; i < registrants.value.length; i++) {
            const currentRegistrant = registrants.value[i];

            for (const form of registrationEntryState.viewModel.registrantForms) {
                for (const field of form.fields) {
                    if (!field.isSharedValue) {
                        continue;
                    }

                    const valueToShare = firstRegistrant.fieldValues[field.guid];

                    if (valueToShare && typeof valueToShare === "object") {
                        currentRegistrant.fieldValues[field.guid] = { ...valueToShare };
                    }
                    else {
                        currentRegistrant.fieldValues[field.guid] = valueToShare;
                    }
                }
            }
        }
    }

    // #endregion

    // #region Computed Values

    /** Will some of the registrants have to be added to a waitlist */
    const hasWaitlist = computed<boolean>(() => {
        return registrationEntryState.registrants.some(r => r.isOnWaitList);
    });

    /** Will this registrant be added to the waitlist? */
    const isOnWaitlist = computed<boolean>(() => {
        const currentRegistrant = registrationEntryState.registrants[registrationEntryState.currentRegistrantIndex];
        return currentRegistrant.isOnWaitList;
    });

    /** What are the registrants called? */
    const registrantTerm = computed<string>(() => {
        return (registrationEntryState.viewModel.registrantTerm || "registrant").toLowerCase();
    });

    const registrants = computed<RegistrantInfo[]>(() => {
        return registrationEntryState.registrants;
    });

    const currentRegistrantIndex = computed<number>(() => {
        return registrationEntryState.currentRegistrantIndex;
    });

    // #endregion
</script>